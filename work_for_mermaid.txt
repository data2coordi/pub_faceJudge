Class: AnalyzeClass
AnalyzeClass()
Represents a class for analyzing facial features and personal color.
Constructor
new AnalyzeClass()
Source:
JudgeFaceApri.js, line 53
Methods
(async, static) analyze(faceApiClass, start_img)
Performs facial analysis using Face API and updates the UI.
Parameters:
Name	Type	Description
faceApiClass	FaceApiClass	The instance of FaceApiClass for face analysis.
start_img	HTMLMediaElement	The media element containing the image to analyze.
Source:
JudgeFaceApri.js, line 115



Class: FaceApiClass
FaceApiClass()
Represents a class for handling face-related API operations.
Constructor
new FaceApiClass()
Source:
JudgeFaceApri.js, line 9
Methods
(static) createCanvasFromMedia(start_img) → {HTMLCanvasElement}
Creates a canvas from a media element.
Parameters:
Name	Type	Description
start_img	HTMLMediaElement	The media element to create a canvas from.
Source:
JudgeFaceApri.js, line 31
Returns:
The created canvas element.
Type
HTMLCanvasElement
(static) create_model()
Creates models required for face detection and landmark extraction.
Source:
JudgeFaceApri.js, line 15
(static) detectAllFaces(start_img) → {Promise}
Detects all faces in the provided media element and extracts facial landmarks.
Parameters:
Name	Type	Description
start_img	HTMLMediaElement	The media element containing the image.
Source:
JudgeFaceApri.js, line 42
Returns:
A promise that resolves with face detection results.
Type
Promise




Class: FacePartClass
FacePartClass(id, rgbs, rgb_scopes)
Represents a class for storing information about a face part.
Constructor
new FacePartClass(id, rgbs, rgb_scopes)
Creates an instance of FacePartClass.
Parameters:
Name	Type	Description
id	string	The identifier of the face part.
rgbs	Array.<RgbClass>	An array of RgbClass instances representing RGB values.
rgb_scopes	object	Additional RGB scope information.
Source:
JudgeFaceDomainClass.js, line 27
Methods
get_id() → {string}
Gets the identifier of the face part.
Source:
JudgeFaceDomainClass.js, line 46
Returns:
The identifier of the face part.
Type
string
get_rgbs() → {Array.<RgbClass>}
Gets the array of RGB values associated with the face part.
Source:
JudgeFaceDomainClass.js, line 55
Returns:
An array of RgbClass instances representing RGB values.
Type
Array.<RgbClass>


Class: FourPosFactory
FourPosFactory()
Represents a factory class for creating facial parts with four positions.
Constructor
new FourPosFactory()
Source:
JudgeFaceClass.js, line 273
Extends
PartFactory
Methods
get_part(part_id) → {Object}
Gets a facial part based on the part ID.
Parameters:
Name	Type	Description
part_id	string	The ID of the facial part.
Inherited From:
PartFactory#get_part
Source:
JudgeFaceClass.js, line 161
Returns:
The created facial part.
Type
Object



Class: JudgeByHsbClass
JudgeByHsbClass()
Represents a class for judging personal color based on facial features with HSB comparison.
Constructor
new JudgeByHsbClass()
Source:
JudgeFaceClass.js, line 439
Extends
JudgePersonalColorClass
Methods
get_scores() → {Object}
Gets the personal color scores based on the facial part.
Inherited From:
JudgePersonalColorClass#get_scores
Source:
JudgeFaceClass.js, line 342
Returns:
The personal color scores.
Type
Object



Class: JudgeByRatioClass
JudgeByRatioClass()
Represents a class for judging personal color based on facial features with ratio comparison.
Constructor
new JudgeByRatioClass()
Source:
JudgeFaceClass.js, line 411
Extends
JudgePersonalColorClass
Methods
get_scores() → {Object}
Gets the personal color scores based on the facial part.
Inherited From:
JudgePersonalColorClass#get_scores
Source:
JudgeFaceClass.js, line 342
Returns:
The personal color scores.
Type
Object




Class: JudgeFaceClass
JudgeFaceClass(randmark_positions, width, height, scope_db)
Represents a class for judging facial features based on personal color.
Constructor
new JudgeFaceClass(randmark_positions, width, height, scope_db)
Creates an instance of JudgeFaceClass.
Parameters:
Name	Type	Description
randmark_positions	Array.<Object>	An array of landmark positions.
width	number	The width of the image.
height	number	The height of the image.
scope_db	Object	The database containing scope information.
Source:
JudgeFaceClass.js, line 9
Methods
get_judge_result(part) → {string}
Gets the judge result for a specific facial part.
Parameters:
Name	Type	Description
part	string	The ID of the facial part.
Source:
JudgeFaceClass.js, line 64
Returns:
The judge result for the specified facial part.
Type
string
get_judge_score(part) → {number}
Gets the judge score for a specific facial part.
Parameters:
Name	Type	Description
part	string	The ID of the facial part.
Source:
JudgeFaceClass.js, line 54
Returns:
The judge score for the specified facial part.
Type
number
judge_personal_color(part_id, factory)
Judges personal color for a specific facial part.
Parameters:
Name	Type	Description
part_id	string	The ID of the facial part.
factory	Object	The factory object for creating facial parts.
Source:
JudgeFaceClass.js, line 39



Class: JudgeFaceGuiClass
JudgeFaceGuiClass()
Represents the graphical user interface (GUI) for JudgeFaceClass.
Constructor
new JudgeFaceGuiClass()
Source:
JudgeFaceGuiClass.js, line 71
Methods
(static) boot_gui()
Boots up the JudgeFaceClass GUI.
Source:
JudgeFaceGuiClass.js, line 129
(static) display_result(id, result_hoho, result_hoho_score)
Displays the result information on the GUI.
Parameters:
Name	Type	Description
id	string	The identifier.
result_hoho	string	The result for hoho.
result_hoho_score	object	The scores for hoho.
Source:
JudgeFaceGuiClass.js, line 110
(static) drow_judge_position(base_canvas, detection, judge_positions)
Draws the judge positions on the base canvas.
Parameters:
Name	Type	Description
base_canvas	HTMLCanvasElement	The base canvas element.
detection	Object	The detection information.
judge_positions	Array	The array of judge positions.
Source:
JudgeFaceGuiClass.js, line 80
(static) photograph()
Activates the photograph mode by setting up the camera.
Source:
JudgeFaceGuiClass.js, line 189
(static) shutter()
Captures a photo and sets it as the start image.
Source:
JudgeFaceGuiClass.js, line 165



Class: JudgeFaceStateClass
JudgeFaceStateClass(items_tableopt)
Represents the state of the JudgeFaceClass GUI.
Constructor
new JudgeFaceStateClass(items_tableopt)
Creates an instance of JudgeFaceStateClass.
Parameters:
Name	Type	Attributes	Default	Description
items_table	Object	<optional>
Items_table	The table containing information about visible items.
Source:
JudgeFaceGuiClass.js, line 7
Methods
to_init()
Switches the GUI state to the initialization state.
Source:
JudgeFaceGuiClass.js, line 36
to_photograph()
Switches the GUI state to the photograph state.
Source:
JudgeFaceGuiClass.js, line 60
to_result()
Switches the GUI state to the result state.
Source:
JudgeFaceGuiClass.js, line 44
to_selected()
Switches the GUI state to the selected state.
Source:
JudgeFaceGuiClass.js, line 52



Class: JudgeFaceStateClass
JudgeFaceStateClass(items_tableopt)
Represents the state of the JudgeFaceClass GUI.
Constructor
new JudgeFaceStateClass(items_tableopt)
Creates an instance of JudgeFaceStateClass.
Parameters:
Name	Type	Attributes	Default	Description
items_table	Object	<optional>
Items_table	The table containing information about visible items.
Source:
JudgeFaceGuiClass.js, line 7
Methods
to_init()
Switches the GUI state to the initialization state.
Source:
JudgeFaceGuiClass.js, line 36
to_photograph()
Switches the GUI state to the photograph state.
Source:
JudgeFaceGuiClass.js, line 60
to_result()
Switches the GUI state to the result state.
Source:
JudgeFaceGuiClass.js, line 44
to_selected()
Switches the GUI state to the selected state.
Source:
JudgeFaceGuiClass.js, line 52




Class: JudgePersonalColorClass
JudgePersonalColorClass(arg_part, part_scope_db)
Represents a class for judging personal color based on facial features.
Constructor
new JudgePersonalColorClass(arg_part, part_scope_db)
Creates an instance of JudgePersonalColorClass.
Parameters:
Name	Type	Description
arg_part	Object	The facial part.
part_scope_db	Object	The database containing scope information for the facial part.
Source:
JudgeFaceClass.js, line 322
Extends
JudgePersonalColorClass
Methods
get_scores() → {Object}
Gets the personal color scores based on the facial part.
Overrides:
JudgePersonalColorClass#get_scores
Source:
JudgeFaceClass.js, line 342
Returns:
The personal color scores.
Type
Object



Class: PartFactory
PartFactory(cavas_image_data2d, randmark_positions, randmark_part_db, judge_ct)
Represents a factory class for creating facial parts.
Constructor
new PartFactory(cavas_image_data2d, randmark_positions, randmark_part_db, judge_ct)
Creates an instance of PartFactory.
Parameters:
Name	Type	Default	Description
cavas_image_data2d	Object		2D array representing the image data.
randmark_positions	Array.<Object>		An array of landmark positions.
randmark_part_db	Object		The database containing information about facial parts.
judge_ct	number	1	The judge count.
Source:
JudgeFaceClass.js, line 99
Methods
get_part(part_id) → {Object}
Gets a facial part based on the part ID.
Parameters:
Name	Type	Description
part_id	string	The ID of the facial part.
Source:
JudgeFaceClass.js, line 161
Returns:
The created facial part.
Type
Object
(static) add_positions(pos)
Adds positions to the judge positions.
Parameters:
Name	Type	Description
pos	Object	The position to be added.
Source:
JudgeFaceClass.js, line 150
(static) clear_judge_positions()
Clears the judge positions.
Source:
JudgeFaceClass.js, line 128
(static) get_judge_positions() → {Array.<Object>}
Gets the judge positions.
Source:
JudgeFaceClass.js, line 139
Returns:
An array of judge positions.
Type
Array.<Object>


Class: RgbClass
RgbClass(r, g, b)
Represents a class for storing RGB values.
Constructor
new RgbClass(r, g, b)
Creates an instance of RgbClass.
Parameters:
Name	Type	Description
r	number	The red component of the RGB color.
g	number	The green component of the RGB color.
b	number	The blue component of the RGB color.
Source:
JudgeFaceDomainClass.js, line 6







Class: ThreePosFactory
ThreePosFactory()
Represents a factory class for creating facial parts with three positions.
Constructor
new ThreePosFactory()
Source:
JudgeFaceClass.js, line 241
Extends
PartFactory
Methods
get_part(part_id) → {Object}
Gets a facial part based on the part ID.
Parameters:
Name	Type	Description
part_id	string	The ID of the facial part.
Inherited From:
PartFactory#get_part
Source:
JudgeFaceClass.js, line 161
Returns:
The created facial part.
Type
Object





Methods
Out_debug(msg)
Outputs debug messages to the console.
Parameters:
Name	Type	Description
msg	string	The debug message.
Source:
JudgeFaceClass.js, line 85
convers_image_to_2d(image_data, width, height) → {Object}
Converts image data to a 2D array.
Parameters:
Name	Type	Description
image_data	Array.<number>	The image data array.
width	number	The width of the image.
height	number	The height of the image.
Source:
JudgeFaceClass.js, line 511
Returns:
The 2D array representing the image data.
Type


Methods
Out_debug(msg)
Outputs debug messages to the console.
Parameters:
Name	Type	Description
msg	string	The debug message.
Source:
JudgeFaceClass.js, line 85
convers_image_to_2d(image_data, width, height) → {Object}
Converts image data to a 2D array.
Parameters:
Name	Type	Description
image_data	Array.<number>	The image data array.
width	number	The width of the image.
height	number	The height of the image.
Source:
JudgeFaceClass.js, line 511
Returns:
The 2D array representing the image data.
Type
Object
